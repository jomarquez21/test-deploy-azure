name: 'Deploy'

on:
    pull_request: null
    workflow_dispatch:
        inputs:
            environment:
                description: 'The environment where the deployment will be performed.'
                required: true
                type: choice
                options:
                    - '200'

jobs:
    # build-php:
    #     name: 'Build PHP dependencies'
    #     uses: 'nubity/dev-kit/.github/workflows/php-build.yaml@master'
    #     secrets: inherit
    deploy:
        name: 'Deploy to environment "${{ inputs.environment }}"'
        runs-on: ubuntu-latest
        # needs:
        #     - build-php
        environment: '${{ inputs.environment }}'
        steps:
            # -
            #     name: 'Load environment variables'
            #     run: |
            #         echo 'COMPOSE_PROJECT_NAME=${{ needs.build-php.outputs.project-name }}' >> "${GITHUB_ENV}"
            #         echo 'COMPOSE_FILE=${{ needs.build-php.outputs.compose-file }}' >> "${GITHUB_ENV}"
            -
                name: 'Checkout repository'
                # uses: 'actions/checkout@v4'
                uses: 'actions/checkout@main'

            -
                name: 'Build Composer dependencies'
                run: docker compose -f ./compose.yaml run --rm cli composer install --prefer-dist --optimize-autoloader --no-interaction

            -
                name: 'build'
                run: |
                    if [ "200" == "$environment" ]; then
                        INSTALL_DEV_DEPS=1
                        APP_ENV='dev'
                    else
                        INSTALL_DEV_DEPS=0
                        APP_ENV='prod'
                    fi

                    docker image build \
                        --file ./Dockerfile \
                        --build-arg 'INSTALL_DEV_DEPS=${INSTALL_DEV_DEPS}' \
                        --build-arg 'APP_ENV=${APP_ENV}' \
                        --target base \
                        --tag '${{ vars.DOCKER_TAG }}' \
                        .

            -
                  name: 'Install VPN client'
                  id: vpn-installation
                  run: sudo apt-get install vpnc

            -
                name: 'Connect VPN'
                id: vpn-connect
                if: ${{ 'success' == steps.vpn-installation.conclusion}}
                run: |
                    sudo vpnc \
                        --gateway 192.100.176.95 \
                        --id VPNADTmp \
                        --secret '${{ secrets.VPN_SECRET }}' \
                        --username '${{ vars.VPN_USER }}' \
                        --password '${{ secrets.VPN_PASSWORD }}' \
                        --dh dh5 \
                        --pfs dh5;

            -
                name: Login to Docker Hub
                run: |
                    echo '${{ secrets.DOCKER_PASSWORD }}' | \
                        docker login '${{ vars.DOCKER_REGISTRY }}' --username '${{ vars.DOCKER_USERNAME }}' \
                        --password-stdin 

            # - 
            #     name: 'Docker image push'
            #     run: |
            #         docker push '${{ vars.DOCKER_TAG }}'

            -
                name: 'Azure login'
                id: azure-login
                if: ${{ 'success' == steps.vpn-connect.conclusion }}
                run: |
                    docker compose -f compose.yaml run --rm cli bash -c "\
                        az login -u '${{ secrets.AZURE_WEB_APP_CONTAINER_USER }}' \
                            -p '${{ secrets.AZURE_WEB_APP_CONTAINER_PASSWORD }}' \
                    "

            -
                name: 'Azure container restore'
                id: azure-container-restore
                if: ${{ 'success' == steps.azure-login.conclusion }}
                run: |
                    docker compose -f compose.yaml run --rm cli bash -c "\
                        az webapp restart \
                            --name '${{ vars.AZURE_WEB_APP_CONTAINERS_NAME }}' \
                            --resource-group '${{ secrets.AZURE_WEB_APP_CONTAINERS_RESOURCE_GROUP }}' \
                            --subscription '${{ secrets.AZURE_WEB_APP_CONTAINERS_SUBSCRIPTION_ID }}'
                    "

            -
                name: 'Azure logout'
                if: ${{ 'success' == steps.azure-login.conclusion }}
                run: docker compose -f compose.yaml run --rm cli bash -c "az logout"

            -
                  name: 'Disconnect VPN'
                  if: ${{ 'success' == steps.vpn-connect.conclusion }}
                  run: sudo vpnc-disconnect
