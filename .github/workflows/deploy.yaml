name: 'Deploy'

on:
    pull_request: null
    workflow_dispatch:
        inputs:
            environment:
                description: 'The environment where the deployment will be performed.'
                required: true
                type: choice
                options:
                    - '200'

jobs:
    # build-php:
    #     name: 'Build PHP dependencies'
    #     uses: 'nubity/dev-kit/.github/workflows/php-build.yaml@master'
    #     secrets: inherit
    deploy:
        name: 'Deploy to environment "${{ inputs.environment }}"'
        runs-on: ubuntu-latest
        # needs:
        #     - build-php
        environment: '${{ inputs.environment }}'
        steps:
            # -
            #     name: 'Load environment variables'
            #     run: |
            #         echo 'COMPOSE_PROJECT_NAME=${{ needs.build-php.outputs.project-name }}' >> "${GITHUB_ENV}"
            #         echo 'COMPOSE_FILE=${{ needs.build-php.outputs.compose-file }}' >> "${GITHUB_ENV}"
            -
                name: 'Checkout repository'
                # uses: 'actions/checkout@v4'
                uses: 'actions/checkout@main'

            - 
                name: Check Docker Version
                run: |
                    route -n;
                    docker --version;

            -
                name: 'Install VPN client'
                id: vpn-installation
                run: sudo apt-get install vpnc


            - 
                name: Check Docker Version
                run: docker --version
            - 
                name: Install Latest Docker
                run: |
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
                    sudo apt-get update
                    sudo apt-get install docker-ce

            -
                name: 'Build Composer dependencies'
                run: docker compose -f ./compose.yaml run --rm cli composer install --prefer-dist --optimize-autoloader --no-interaction

            - 
                name: 'Create database certificate'
                run: |
                    mkdir --parents ./var/mysql
                    echo '${{ secrets.AZURE_DATABASE_CERTIFICATE }}' > ./var/mysql/client-key.pem;
                    chmod 0400 ./var/mysql/client-key.pem;

            - 
                name: Edit .env file
                run: |
                      echo "****************************************************************************"
                      echo "Setting DATABASE_URL environment variable ..."
                      
                      echo 'DATABASE_URL=${{ secrets.DATABASE_DSN }}' >> .env

            -
                name: 'build'
                run: |
                    if [ "200" == "$environment" ]; then
                        INSTALL_DEV_DEPS=1
                        APP_ENV='dev'
                    else
                        INSTALL_DEV_DEPS=0
                        APP_ENV='prod'
                    fi

                    docker image build \
                        --file ./Dockerfile \
                        --build-arg 'INSTALL_DEV_DEPS=${INSTALL_DEV_DEPS}' \
                        --build-arg 'APP_ENV=${APP_ENV}' \
                        --target base \
                        --tag '${{ vars.DOCKER_TAG }}' \
                        .

            - 
                name: Check Docker Version
                run: |
                    route -n;
                    docker --version;
                    sleep 10;
            
            -
                name: 'Connect VPN'
                id: vpn-connect
                if: ${{ 'success' == steps.vpn-installation.conclusion}}
                run: |
                    sudo vpnc \
                        --gateway 192.100.176.95 \
                        --id VPNADTmp \
                        --secret '${{ secrets.VPN_SECRET }}' \
                        --username '${{ vars.VPN_USER }}' \
                        --password '${{ secrets.VPN_PASSWORD }}' \
                        --dh dh5 \
                        --pfs dh5;   

            # -
            #     name: Login to Docker Hub
            #     uses: docker/login-action@v3
            #     with:
            #         # registry: <registry-name>.azurecr.io
            #         # registry: bmecvmfcorcd04.azurecr.io
            #         registry: ${{ vars.DOCKER_REGISTRY }}
            #         username: ${{ vars.DOCKER_USERNAME }}
            #         password: ${{ secrets.DOCKER_PASSWORD }}
            #         ecr: false

            -
                name: Login to ACR
                if: ${{ 'success' == steps.vpn-connect.conclusion}}
                run: |
                    echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ vars.DOCKER_REGISTRY }}.azurecr.io --username ${{ vars.DOCKER_USERNAME }} --password-stdin

            # -
            #     name: 'Synchronize database'
            #     run: |
            #         docker compose -f compose.yaml run --rm cli bash -c "\
            #             bin/console doctrine:schema:update --dump-sql --complete -e prod \
            #             && \
            #             bin/console doctrine:migration:migrate --no-interaction -e prod -vvv
            #         "

            # -
            #     name: Login to Docker Hub
            #     id: docker-authentication
            #     run: |
            #         for i in {1..5}; do
            #             echo "Attempt $i to login to Docker...";
            #             echo '${{ secrets.DOCKER_PASSWORD }}' | \
            #                 docker login '${{ vars.DOCKER_REGISTRY }}' --username '${{ vars.DOCKER_USERNAME }}' \
            #                 --password-stdin && break;
            #             echo "Docker login failed, retrying in 10s...";
            #             sleep 10;
            #         done
            # -
            #     name: Login to Docker Hub
            #     id: docker-authentication
            #     if: ${{ 'success' == steps.vpn-connect.conclusion}}
            #     run: |
            #         set -x;
            #         docker --version;
            #         echo '${{ secrets.DOCKER_PASSWORD }}' | \
            #             docker --log-level debug login '${{ vars.DOCKER_REGISTRY }}' \
            #             --username '${{ vars.DOCKER_USERNAME }}' --password-stdin
            # - 
            #     name: Login to Docker Hub
            #     id: docker-authentication
            #     if: ${{ 'success' == steps.vpn-connect.conclusion}}
            #     run: |
            #         echo "Intentando login en Docker Hub..."
            #         attempts=0
            #         max_attempts=5
            #         success=false
              
            #         while [ $attempts -lt $max_attempts ]; do
            #             echo "Intento $((attempts + 1)) de $max_attempts..."
              
            #             echo '${{ secrets.DOCKER_PASSWORD }}' | \
            #                 docker login '${{ vars.DOCKER_REGISTRY }}' --username '${{ vars.DOCKER_USERNAME }}' \
            #                 --password-stdin
              
            #             # Comprobar si el login fue exitoso
            #             if [ $? -eq 0 ]; then
            #                 success=true
            #                 echo "Docker login exitoso.";
            #                 break;
            #             else
            #                 echo "Docker login falló, reintentando en 10 segundos...";
            #                 attempts=$((attempts + 1));
            #                 sleep 10;
            #             fi
            #         done
              
            #         if [ "$success" = false ]; then
            #             echo "No se pudo realizar el login en Docker después de $max_attempts intentos."
            #             exit 1;
            #         fi
            # - 
            #     name: 'Docker image push'
            #     run: |
            #         docker push '${{ vars.DOCKER_TAG }}'

            # -
            #     name: 'Azure login'
            #     id: azure-login
            #     if: ${{ 'success' == steps.vpn-connect.conclusion }}
            #     run: |
            #         docker compose -f compose.yaml run --rm cli bash -c "\
            #             az login -u '${{ secrets.AZURE_WEB_APP_CONTAINER_USER }}' \
            #                 -p '${{ secrets.AZURE_WEB_APP_CONTAINER_PASSWORD }}' \
            #             && \
            #             az webapp restart \
            #                 --name '${{ vars.AZURE_WEB_APP_CONTAINERS_NAME }}' \
            #                 --resource-group '${{ secrets.AZURE_WEB_APP_CONTAINERS_RESOURCE_GROUP }}' \
            #                 --subscription '${{ secrets.AZURE_WEB_APP_CONTAINERS_SUBSCRIPTION_ID }}'
            #         "

            -
                name: Reset .env file
                run: |
                    echo "Reset .env file ..."
                    git checkout -- .env

            # -
            #       name: 'Disconnect VPN'
            #       if: ${{ 'success' == steps.vpn-connect.conclusion }}
            #       run: sudo vpnc-disconnect
